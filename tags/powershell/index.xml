<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Powershell on Blog</title><link>https://blog.sions.org/tags/powershell/</link><description>Recent content in Powershell on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 12 Feb 2024 08:00:00 +0000</lastBuildDate><atom:link href="https://blog.sions.org/tags/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes on Powershell</title><link>https://blog.sions.org/posts/powershell-notes/</link><pubDate>Mon, 12 Feb 2024 08:00:00 +0000</pubDate><guid>https://blog.sions.org/posts/powershell-notes/</guid><description>Some silly little powershell notes from a silly little man.
Mapping network printers This one is super duper straightforward. Can probably use it remotely through the command line option on a UEM (Unified Endpoint Management) tool.
Add-Printer -ConnectionName \\printer-server\PRINTERNAME Fetching an installer from a URL and install it This one we create a temporary directory, set the URL where the installer can be located, download, then install it. If there&amp;rsquo;s any switches you want applied to the installer, place them after the /i &amp;lt;installer&amp;gt; portion.</description><content>&lt;p>Some silly little powershell notes from a silly little man.&lt;/p>
&lt;h2 id="mapping-network-printers">Mapping network printers&lt;/h2>
&lt;p>This one is super duper straightforward. Can probably use it remotely through the command line option on a UEM (Unified Endpoint Management) tool.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>Add-Printer -ConnectionName \\printer-server\PRINTERNAME
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="fetching-an-installer-from-a-url-and-install-it">Fetching an installer from a URL and install it&lt;/h2>
&lt;p>This one we create a temporary directory, set the URL where the installer can be located, download, then install it. If there&amp;rsquo;s any switches you want applied to the installer, place them after the &lt;code>/i &amp;lt;installer&amp;gt;&lt;/code> portion.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>New-Item -Path &lt;span style="color:#e6db74">&amp;#39;C:\temp&amp;#39;&lt;/span> -ItemType Directory -Force
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$installerURL = &lt;span style="color:#e6db74">&amp;#34;https://pkgs.tailscale.com/stable/tailscale-setup-1.58.2-amd64.msi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Invoke-WebRequest $installerURL -OutFile C:\temp\tailscale-setup-amd64.msi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Start-Process msiexec.exe -Wait -ArgumentList &lt;span style="color:#e6db74">&amp;#39;/i C:\temp\tailscale-setup-amd64.msi&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="uninstall-a-package">Uninstall a package&lt;/h2>
&lt;p>Fairly straight forward, we need to find the installed Win32 package, then we target it with a uninstall function.&lt;/p>
&lt;p>First we find our target and the proper details for filtering. Note this will only work on Win32_Product installed items. A quick google tells me &amp;ldquo;The Win32_Product WMI class represents products as they are installed by Windows Installer.&amp;rdquo; as for what a Windows Installer is and isn&amp;rsquo;t I&amp;rsquo;m not fully sure. I see several things that are absent from this list. But we proceed!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>Get-WmiObject -Class Win32_Product
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You&amp;rsquo;ll receive a list of items similiar to the following.&lt;/p>
&lt;pre tabindex="0">&lt;code>IdentifyingNumber : {23170F69-40C1-2701-2201-000001000000}
Name : 7-Zip 22.01
Vendor : Igor Pavlov
Version : 22.01.00.0
Caption : 7-Zip 22.01
&lt;/code>&lt;/pre>&lt;p>Then we run the following. In this case using the IdentifyingNumber is preferable as this can help unambiguously point at a specific product. But using Name is also possible.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>$application1 = Get-WmiObject -Class Win32_Product -Filter &lt;span style="color:#e6db74">&amp;#34;IdentifyingNumber = &amp;#39;{23170F69-40C1-2701-2201-000001000000}&amp;#39;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$application1.Uninstall()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>